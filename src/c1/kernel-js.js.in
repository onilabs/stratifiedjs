/*
 * C1 JavaScript->JavaScript compiler kernel  
 *
 * Part of StratifiedJS
 * http://onilabs.com/stratifiedjs
 *
 * (c) 2011-2022 Oni Labs, http://onilabs.com
 *
 * This file is licensed under the terms of the GPL v2, see
 * http://www.gnu.org/licenses/gpl-2.0.html
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

//----------------------------------------------------------------------
// helpers:

function push_scope(pctx) {
  pctx.scopes.push({stmts:[]});
}
function pop_scope(pctx) {
  return pctx.scopes.pop();
}
function top_scope(pctx) {
  return pctx.scopes[pctx.scopes.length-1];
}

//----------------------------------------------------------------------
// misc:

#define HANDLE_NEWLINES(n, pctx) /**/

//----------------------------------------------------------------------
// contexts:

#define BEGIN_SCRIPT(pctx)                        \
  if (typeof pctx.scopes !== 'undefined')         \
    throw new Error("Internal parser error: Nested script"); \
  pctx.scopes = [];                               \
  push_scope(pctx);

#define ADD_SCRIPT_STMT(stmt, pctx)             \
  top_scope(pctx).stmts.push(stmt);

#define END_SCRIPT(pctx)                        \
  return pop_scope(pctx).stmts.join("");


#define BEGIN_FBODY(pctx)                    \
  push_scope(pctx);

#define ADD_FBODY_STMT(stmt, pctx)              \
  top_scope(pctx).stmts.push(stmt);

#define END_FBODY(pctx,ext)                      \
  return "{"+pop_scope(pctx).stmts.join("")+"}";


#define BEGIN_BLOCK(pctx)                       \
  push_scope(pctx);

#define ADD_BLOCK_STMT(stmt, pctx)              \
  top_scope(pctx).stmts.push(stmt);

#define END_BLOCK(pctx, ext)                           \
  return "{"+pop_scope(pctx).stmts.join("")+"}";


#define BEGIN_CASE_CLAUSE(cexp, pctx)          \
  push_scope(pctx);                            \
  top_scope(pctx).exp = cexp;

#define ADD_CASE_CLAUSE_STMT(stmt, pctx)        \
  top_scope(pctx).stmts.push(stmt);

#define END_CASE_CLAUSE(pctx, ext)                     \
  var scope = pop_scope(pctx);                    \
  var rv;                                         \
  if (scope.exp)                                  \
    rv = "case "+scope.exp+":";                   \
  else                                            \
    rv = "default:";                              \
  return rv + scope.stmts.join(" ");

#define BEGIN_LOOP_SCOPE(pctx)   /* */
#define END_LOOP_SCOPE(pctx)     /* */
#define BEGIN_SWITCH_SCOPE(pctx) /* */
#define END_SWITCH_SCOPE(pctx)   /* */

//----------------------------------------------------------------------
// statements:
#define GEN_EMPTY_STMT(pctx, ext) return ";";

#define GEN_EXP_STMT(exp, pctx, ext) return exp +";";

#define GEN_LBL_STMT(lbl, stmt, pctx, ext) return lbl+": "+stmt;

function gen_fun_pars(pars) {
  return pars.join(",");
}

#define GEN_FUN_DECL(fname, pars, body, pctx, ext)           \
  return "function "+fname+"("+gen_fun_pars(pars)+")"+body;

#define GEN_VAR_DECL(decls, pctx, ext)                \
  var rv = "var ";                               \
  for (var i=0; i<decls.length; ++i) {           \
    if (i) rv += ",";                            \
    rv += decls[i][0];                           \
    if (decls[i].length == 2)                    \
      rv += "="+decls[i][1];                     \
  }                                              \
  return rv+";";

#define GEN_IF(test, consequent, alternative, pctx, ext) \
  var rv = "if ("+test+")"+consequent;              \
  if (alternative !== null)                         \
    rv += "else "+alternative;                      \
  return rv;

#define GEN_DO_WHILE(body, test, pctx, ext)          \
  return "do "+body+"while("+test+");";

#define GEN_WHILE(test, body, pctx, ext)             \
  return "while("+test+")"+body;

#define GEN_FOR(init_exp, decls, test_exp, inc_exp, body, pctx, ext)         \
  var rv = "for(";                                                      \
  if (init_exp) {                                                       \
    rv += init_exp + ";";                                               \
  }                                                                     \
  else if (decls) {                                                     \
  var d = (function(decls, pctx) {                                      \
      GEN_VAR_DECL(decls, pctx) })(decls, pctx);                        \
  rv += d;                                                              \
  }                                                                     \
  else                                                                  \
    rv += ";";                                                          \
  if (test_exp) rv += test_exp;                                         \
  rv += ";";                                                            \
  if (inc_exp) rv += inc_exp;                                           \
  rv += ")";                                                            \
  rv += body;                                                           \
  return rv;

#define GEN_FOR_IN(lhs_exp, decl, obj_exp, body, pctx, ext)  \
  var rv = "for(";                                      \
  if (lhs_exp) {                                        \
    rv += lhs_exp;                                      \
  }                                                     \
  else {                                                \
  rv += "var "+decl[0];                                 \
  if (decl.length > 1)                                  \
    rv += "=" +decl[1];                                 \
  }                                                     \
  rv += " in " + obj_exp + ")";                         \
  rv += body;                                           \
  return rv;

#define GEN_FOR_OF(lhs_exp, decl, obj_exp, body, pctx, ext)  \
  var rv = "for(";                                      \
  if (lhs_exp) {                                        \
    rv += lhs_exp;                                      \
  }                                                     \
  else {                                                \
  rv += "var "+decl[0];                                 \
  if (decl.length > 1)                                  \
    rv += "=" +decl[1];                                 \
  }                                                     \
  rv += " of " + obj_exp + ")";                         \
  rv += body;                                           \
  return rv;

#define GEN_CONTINUE(lbl, pctx, ext)                 \
  var rv = "continue";                          \
  if (lbl !== null)                             \
    rv += " "+lbl;                              \
  return rv+";"

#define GEN_BREAK(lbl, pctx, ext)                    \
  var rv = "break";                             \
  if (lbl !== null)                             \
    rv += " "+lbl;                              \
  return rv+";"

#define GEN_RETURN(exp, pctx, ext)                   \
  var rv = "return";                            \
  if (exp != null)                              \
    rv += " "+exp;                              \
  return rv+";";

#define GEN_WITH(exp, body, pctx, ext)               \
  return "with("+exp+")"+body;

#define GEN_SWITCH(exp, clauses, pctx, ext)          \
  return "switch("+exp+"){"+clauses.join("")+"}";

#define GEN_THROW(exp, pctx, ext) return "throw "+exp+";";

#define GEN_TRY(block, crf, pctx, ext)                                  \
  var rv = "try"+block;                                            \
  if (crf[0])                                                      \
    rv += "catch("+crf[0][0]+")"+crf[0][1];                        \
  if (crf[2])                                                      \
    rv += "finally"+crf[2][1];                                     \
  return rv;

  

//----------------------------------------------------------------------
// expressions:

#define GEN_INFIX_OP(left, id, right, pctx, ext)     \
  return left+" "+id+" "+right;

#define GEN_ASSIGN_OP(left, id, right, pctx, ext)     \
  return left+id+right;

#define GEN_SPREAD(right, pctx, ext)                 \
  return '...'+right;

#define GEN_PREFIX_OP(id, right, pctx, ext)          \
  return id + " " + right;

#define GEN_POSTFIX_OP(left, id, pctx, ext)          \
  return left + id + " ";

#define GEN_LITERAL(type, value, pctx, ext) return value;

#define GEN_IDENTIFIER(value, pctx, ext) return value;

#define GEN_OBJ_LIT(props, pctx, ext)                                    \
  var rv = "{";                                                     \
  for (var i=0; i<props.length; ++i) {                              \
    if (i!=0) rv += ",";                                            \
    if (props[i][0] == "prop")                                      \
      rv += props[i][1] +":"+props[i][2];                           \
    else if (props[i][0] == "get")                                  \
      rv += "get " + props[i][1]+"()"+props[i][2];                  \
    else if (props[i][0] == "set")                                  \
      rv += "set " + props[i][1]+"("+props[i][2]+")"+props[i][3];   \
  }                                                                 \
  rv += "}";                                                        \
  return rv;

#define GEN_ARR_LIT(elements, pctx, ext) return "["+elements.join(",")+"]";

#define GEN_ELISION(pctx) return " ";

#define GEN_DOT_ACCESSOR(l, name, pctx, ext) return l+"."+name;

#define GEN_NEW(exp, args, pctx, ext)                \
  return "new "+exp+"("+args.join(",")+")";

#define GEN_IDX_ACCESSOR(l, idxexp, pctx, ext) return l+"["+idxexp+"]";

#define GEN_FUN_CALL(l, args, pctx, ext) return l+"("+args.join(",")+")";

#define GEN_FUN_EXP(fname, pars, body, pctx, ext)            \
  return "function "+fname+"("+gen_fun_pars(pars)+")"+body;

#define GEN_CONDITIONAL(test, consequent, alternative, pctx, ext) \
  return test+"?"+consequent+":"+alternative;

#define GEN_GROUP(e, pctx, ext) return "("+e+")";

#define GEN_THIS(pctx, ext) return "this";

#define GEN_TRUE(pctx, ext) return "true";

#define GEN_FALSE(pctx, ext) return "false";

#define GEN_NULL(pctx, ext) return "null";


