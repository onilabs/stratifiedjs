/*
 * C1 JS/SJS->minified/stringified compiler kernel  
 *
 * Part of Oni StratifiedJS
 * http://onilabs.com/stratifiedjs
 *
 * (c) 2011-2022 Oni Labs, http://onilabs.com
 *
 * This file is licensed under the terms of the GPL v2, see
 * http://www.gnu.org/licenses/gpl-2.0.html
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

// #define "STRINGIFY" for stringification

//----------------------------------------------------------------------
// helpers:

function push_scope(pctx) {
  pctx.scopes.push({stmts:[]});
  top_scope(pctx).stmts.push(flush_newlines(pctx));
}
function pop_scope(pctx) {
  return pctx.scopes.pop();
}
function top_scope(pctx) {
  return pctx.scopes[pctx.scopes.length-1];
}

//----------------------------------------------------------------------
// misc:

// XXX our newline handling is really quite hackish :-(
// XXX and it's completely broken by multiline strings atm :-(
#define HANDLE_NEWLINES(n, pctx) add_newlines(n,pctx);

function add_newlines(n,pctx) {
  if (!pctx.keeplines) return;
  if (typeof pctx.nls == 'undefined') pctx.nls = "";
#ifdef STRINGIFY
  while (n--) pctx.nls += "\\n";
#else
  while (n--) pctx.nls += "\n";
#endif
}

function flush_newlines(pctx) {
  if (!pctx.nls) return "";
  var rv = pctx.nls;
  pctx.nls = "";
  return rv;
}
  
//----------------------------------------------------------------------
// contexts:

#define BEGIN_SCRIPT(pctx)                                   \
  if (typeof pctx.scopes !== 'undefined')                    \
    throw new Error("Internal parser error: Nested script"); \
  pctx.scopes = [];                                          \
  push_scope(pctx);

#define ADD_SCRIPT_STMT(stmt, pctx)             \
  top_scope(pctx).stmts.push(stmt+flush_newlines(pctx));


// Regarding the use of COMPILED_SRC_TAG in END_SCRIPT, below:
// we always need maintain the COMPILED_SRC_TAG, otherwise clients of the 
// stringifyier, such as generator::BundleGenerator in
// default mode (compiled=false), will generate bundles with files that will be 
// recompiled on the client. This will fail for some files (e.g. a compiled 
// sequence.sjs when put through doc/index.bundle.js.gen)

var COMPILED_SRC_TAG = "/*__oni_compiled_sjs_1*/";
var COMPILED_SRC_TAG_REGEX = /^\/\*\__oni_compiled_sjs_1\*\//;

#ifdef STRINGIFY
#define END_SCRIPT(pctx)                        \
  return '"'+(COMPILED_SRC_TAG_REGEX.exec(pctx.src)?COMPILED_SRC_TAG:'')+pop_scope(pctx).stmts.join("")+'"';
#else
#define END_SCRIPT(pctx)                        \
  return (COMPILED_SRC_TAG_REGEX.exec(pctx.src)?COMPILED_SRC_TAG:'')+pop_scope(pctx).stmts.join("");
#endif

#define BEGIN_FBODY(pctx)                       \
  push_scope(pctx);

#define ADD_FBODY_STMT(stmt, pctx)              \
  top_scope(pctx).stmts.push(stmt+flush_newlines(pctx));

function gen_block(code) {
  if (code.length && code.charAt(code.length-1)==";")
    code = code.substr(0,code.length-1);
  return "{"+code+"}";
}

#define END_FBODY(pctx,ext)                           \
  return gen_block(pop_scope(pctx).stmts.join(""));

#define BEGIN_BLOCK(pctx)                       \
  push_scope(pctx);

#define ADD_BLOCK_STMT(stmt, pctx)              \
  top_scope(pctx).stmts.push(stmt+flush_newlines(pctx));

#define END_BLOCK(pctx, ext)                           \
  return gen_block(pop_scope(pctx).stmts.join(""));


#define BEGIN_CASE_CLAUSE(cexp, pctx)          \
  push_scope(pctx);                            \
  top_scope(pctx).exp = cexp;

#define ADD_CASE_CLAUSE_STMT(stmt, pctx)        \
  top_scope(pctx).stmts.push(stmt+flush_newlines(pctx));

#define END_CASE_CLAUSE(pctx, ext)                     \
  var scope = pop_scope(pctx);                    \
  var rv;                                         \
  if (scope.exp)                                  \
    rv = "case "+scope.exp+":";                   \
  else                                            \
    rv = "default:";                              \
  return rv + scope.stmts.join("");

#define BEGIN_LOOP_SCOPE(pctx)   /* */
#define END_LOOP_SCOPE(pctx)     /* */
#define BEGIN_SWITCH_SCOPE(pctx) /* */
#define END_SWITCH_SCOPE(pctx)   /* */


#define BEGIN_BLAMBDABODY(pctx)                       \
  push_scope(pctx);

#define ADD_BLAMBDABODY_STMT(stmt, pctx)              \
  top_scope(pctx).stmts.push(stmt+flush_newlines(pctx));

#define END_BLAMBDABODY(pctx, ext)                           \
  return pop_scope(pctx).stmts.join("");


//----------------------------------------------------------------------
// statements:
#define GEN_EMPTY_STMT(pctx, ext) return ";";

#define GEN_EXP_STMT(exp, pctx, ext) return exp +";";

#define GEN_LBL_STMT(lbl, stmt, pctx, ext) return lbl+": "+stmt;

function gen_fun_pars(pars) {
  return pars.join(",");
}

#define GEN_FUN_DECL(fname, pars, body, pctx, ext)           \
  return "function "+fname+"("+gen_fun_pars(pars)+")"+body;

#define GEN_VAR_DECL(decls, pctx, ext)                \
  var rv = "var ";                               \
  for (var i=0; i<decls.length; ++i) {           \
    if (i) rv += ",";                            \
    rv += decls[i][0];                           \
    if (decls[i].length == 2)                     \
      rv += "="+decls[i][1];                     \
  }                                              \
  return rv+";";

#define GEN_IF(test, consequent, alternative, pctx, ext)   \
  var rv = "if("+test+")"+consequent;                 \
  if (alternative !== null){                          \
    if( alternative[0] != "{")                        \
      rv += "else "+alternative;                      \
    else                                              \
      rv += "else"+alternative;                       \
  }                                                   \
  return rv;

#define GEN_DO_WHILE(body, test, pctx, ext)          \
  return "do "+body+"while("+test+");";

#define GEN_WHILE(test, body, pctx, ext)             \
  return "while("+test+")"+body;

#define GEN_FOR(init_exp, decls, test_exp, inc_exp, body, pctx, ext)         \
  var rv = "for(";                                                      \
  if (init_exp) {                                                       \
    rv += init_exp + ";";                                               \
  }                                                                     \
  else if (decls) {                                                     \
  var d = (function(decls, pctx) {                                      \
      GEN_VAR_DECL(decls, pctx, null) })(decls, pctx);                        \
  rv += d;                                                              \
  }                                                                     \
  else                                                                  \
    rv += ";";                                                          \
  if (test_exp) rv += test_exp;                                         \
  rv += ";";                                                            \
  if (inc_exp) rv += inc_exp;                                           \
  rv += ")";                                                            \
  rv += body;                                                           \
  return rv;

#define GEN_FOR_IN(lhs_exp, decl, obj_exp, body, pctx, ext)  \
  var rv = "for(";                                      \
  if (lhs_exp) {                                        \
    rv += lhs_exp;                                      \
  }                                                     \
  else {                                                \
  rv += "var "+decl[0];                                 \
  if (decl.length > 1)                                  \
    rv += "=" +decl[1];                                 \
  }                                                     \
  rv += " in " + obj_exp + ")";                         \
  rv += body;                                           \
  return rv;

#define GEN_FOR_OF(lhs_exp, decl, obj_exp, body, pctx, ext)  \
  var rv = "for(";                                      \
  if (lhs_exp) {                                        \
    rv += lhs_exp;                                      \
  }                                                     \
  else {                                                \
  rv += "var "+decl[0];                                 \
  if (decl.length > 1)                                  \
    rv += "=" +decl[1];                                 \
  }                                                     \
  rv += " of " + obj_exp + ")";                         \
  rv += body;                                           \
  return rv;

#define GEN_CONTINUE(lbl, pctx, ext)                 \
  var rv = "continue";                          \
  if (lbl !== null)                             \
    rv += " "+lbl;                              \
  return rv+";"

#define GEN_BREAK(lbl, pctx, ext)                    \
  var rv = "break";                             \
  if (lbl !== null)                             \
    rv += " "+lbl;                              \
  return rv+";"

#define GEN_RETURN(exp, pctx, ext)                   \
  var rv = "return";                            \
  if (exp != null)                              \
    rv += " "+exp;                              \
  return rv+";";

#define GEN_WITH(exp, body, pctx, ext)               \
  return "with("+exp+")"+body;

#define GEN_SWITCH(exp, clauses, pctx, ext)          \
  return "switch("+exp+")"+gen_block(clauses.join(""));

#define GEN_THROW(exp, pctx, ext) return "throw "+exp+";";

function gen_crf(crf) {
  var rv = "";
  if (crf[0])
    rv += "catch("+crf[0][0]+")"+crf[0][1];
  if (crf[1])
    rv += "retract"+crf[1];
  if (crf[2]) {
    if (crf[2][0] !== null) {
      // augmented finally
      rv += "finally("+crf[2][0]+")"+crf[2][1];
    }
    else {
      rv += "finally"+crf[2][1];
    }
  }
  return rv;
}

#define GEN_TRY(block, crf, pctx, ext)               \
  return "try"+block+gen_crf(crf);                                    

//----------------------------------------------------------------------
// expressions:

#define GEN_INFIX_OP(left, id, right, pctx, ext)  \
  return gen_infix_op(left, id, right, pctx);

function gen_infix_op(left, id, right, pctx) {
  if (id == "instanceof" || id == "in" ||
      (id[0] == left[left.length-1]) || // e.g. left= "a--", id="-"
      (id[id.length-1] == right[0])) // e.g. id="+", right="++a"
    return left+" "+id+" "+right;
  else
    return left+id+right;
}

#define GEN_ASSIGN_OP(left, id, right, pctx, ext)     \
  return left+id+right;

#define GEN_SPREAD(right, pctx, ext)                 \
  return '...'+right;

#define GEN_PREFIX_OP(id, right, pctx, ext)          \
  return gen_prefix_op(id, right, pctx);

function gen_prefix_op(id, right, pctx) {
  if (id.length > 2 || // one of [delete,void,typeof,spawn]
      id[0]==right[0] && (id[0] == "+" || id[0] == "-")) // cases like "- --i"
    return id + " " + right;
  else
    return id+right;
}

#define GEN_POSTFIX_OP(left, id, pctx, ext)          \
  return left + id + " ";

#ifdef SJS_ARROWS
#define GEN_THIN_ARROW(body, pctx, ext) GEN_PREFIX_OP('->', body, pctx, ext)
#define GEN_THIN_ARROW_WITH_PARS(pars, body, pctx, ext) GEN_INFIX_OP(pars, '->', body, pctx, ext)
// note the intentional space in ' =>' below; it is to fix cases like '= => ...'
#define GEN_FAT_ARROW(body, pctx, ext) GEN_PREFIX_OP(' =>', body, pctx, ext)
#define GEN_FAT_ARROW_WITH_PARS(pars, body, pctx, ext) GEN_INFIX_OP(pars, '=>', body, pctx, ext)
#endif

#ifdef SJS_DOUBLEDOT
#define GEN_DOUBLEDOT_CALL(l,r,pctx, ext) return l+".."+r;
#endif

#ifdef SJS_DOUBLECOLON
#define GEN_DOUBLECOLON_CALL(l,r,pctx, ext) return l+"::"+r;
#endif

#ifdef SJS_ALTERNATE_NAMESPACE
#define GEN_ALTERNATE_NAMESPACE_OBJ(pctx, ext) return '@';
#define GEN_ALTERNATE_NAMESPACE_IDENTIFIER(value, pctx, ext) return '@'+value;
#endif

#ifdef STRINGIFY
#define GEN_LITERAL(type, value, pctx, ext)                                  \
  if (type == "<string>")                                               \
    value = value.replace(/\\/g,"\\\\").replace(/'/g,"\\'").replace(/"/g,'\\"'); \
  else if (type == "<regex>")                                           \
    value = value.replace(/\\/g,"\\\\").replace(/'/g,"\\'").replace(/"/g,'\\"'); \
  return value;
#else
#define GEN_LITERAL(type, value, pctx, ext) return value;
#endif

#ifdef INTERPOLATING_STRINGS
#define GEN_INTERPOLATING_STR(parts, pctx, ext) return interpolating_string(parts);
function interpolating_string(parts) {
#ifdef STRINGIFY
  var rv = '\\"';
#else
  var rv = '"';
#endif
  for (var i=0,l=parts.length;i<l;++i) {
    var p = parts[i];
    if (Array.isArray(p)) {
      p = '#{'+p[0]+'}';
    }
#ifdef STRINGIFY
    else {
      p = p.replace(/\\/g,"\\\\").replace(/'/g,"\\'").replace(/"/g,'\\"');
    }
#endif
    rv += p;
  }
#ifdef STRINGIFY
  return rv+'\\"';
#else
  return rv+'"';
#endif
}
#endif /* INTERPOLATING_STRINGS */

#ifdef QUASIS
#define GEN_QUASI(parts, pctx, ext) return quasi(parts);
function quasi(parts) {
  var rv = '`';
  for (var i=0,l=parts.length;i<l;++i) {
    if (i % 2)
      rv += '${'+parts[i]+'}';
    else {
#ifdef STRINGIFY
      rv += parts[i].replace(/\\/g,"\\\\").replace(/'/g,"\\'").replace(/"/g,'\\"');
#else
      rv += parts[i];
#endif
    }
  }
  return rv + '`';
}
#endif /* QUASIS */


#define GEN_IDENTIFIER(value, pctx, ext) return value;

#ifdef STRINGIFY
#define GEN_OBJ_LIT(props, pctx, ext)                                    \
  var rv = "{";                                                     \
  for (var i=0; i<props.length; ++i) {                              \
    if (i!=0) rv += ",";                                            \
    if (props[i][0] == "prop") {                                    \
      var v = props[i][1].replace(/\\/g,"\\\\").replace(/'/g,"\\'").replace(/"/g,'\\"'); \
      rv += v +":"+props[i][2];                           \
    }                                                               \
    else if (props[i][0] == "method") {                                    \
      var v = props[i][1].replace(/\\/g,"\\\\").replace(/'/g,"\\'").replace(/"/g,'\\"'); \
      rv += v+(props[i][2].replace(/^[^(]+/,''));                   \
    }                                                               \
    else if (props[i][0] == "pat")                                  \
      rv += props[i][1];                                            \
    else if (props[i][0] == "get")                                  \
      rv += "get " + props[i][1]+"()"+props[i][2];                  \
    else if (props[i][0] == "set")                                  \
      rv += "set " + props[i][1]+"("+props[i][2]+")"+props[i][3];   \
  }                                                                 \
  rv += "}";                                                        \
  return rv;
#else
#define GEN_OBJ_LIT(props, pctx, ext)                                    \
  var rv = "{";                                                     \
  for (var i=0; i<props.length; ++i) {                              \
    if (i!=0) rv += ",";                                            \
    if (props[i][0] == "prop") {                                    \
      rv += props[i][1] +":"+props[i][2];                           \
    }                                                               \
    if (props[i][0] == "method") {                                  \
      rv += props[i][1] +(props[i][2].replace(/^[^(]+/,''));        \
    }                                                               \
    else if (props[i][0] == "pat")                                  \
      rv += props[i][1];                                            \
    else if (props[i][0] == "get")                                  \
      rv += "get " + props[i][1]+"()"+props[i][2];                  \
    else if (props[i][0] == "set")                                  \
      rv += "set " + props[i][1]+"("+props[i][2]+")"+props[i][3];   \
  }                                                                 \
  rv += "}";                                                        \
  return rv;
#endif

#define GEN_ARR_LIT(elements, pctx, ext) return "["+elements.join(",")+"]";

#define GEN_ELISION(pctx) return " ";

#define GEN_DOT_ACCESSOR(l, name, pctx, ext) return l+"."+name;

#define GEN_NEW(exp, args, pctx, ext)                \
  return "new "+exp+"("+args.join(",")+")";

#define GEN_IDX_ACCESSOR(l, idxexp, pctx, ext) return l+"["+idxexp+"]";

#define GEN_FUN_CALL(l, args, pctx, ext) return l+"("+args.join(",")+")";

#define GEN_FUN_EXP(fname, pars, body, pctx, ext)  \
  if (fname.length)                                       \
    return "function "+fname+"("+gen_fun_pars(pars)+")"+body; \
  else                                                    \
    return "function("+gen_fun_pars(pars)+")"+body;

#define GEN_CONDITIONAL(test, consequent, alternative, pctx, ext) \
  return test+"?"+consequent+(alternative === undefined ? "" : ":"+alternative);

#define GEN_GROUP(e, pctx, ext) return "("+e+")";

#define GEN_THIS(pctx, ext) return "this";

#define GEN_TRUE(pctx, ext) return "true";

#define GEN_FALSE(pctx, ext) return "false";

#define GEN_NULL(pctx, ext) return "null";


// Stratified constructs:

#define GEN_WAITFOR_ANDORWHILE(op, blocks, crf, pctx, ext)  \
  var rv = "waitfor";                             \
  for (var i=0; i<blocks.length; ++i){            \
    if (i) rv += op;                              \
    rv += blocks[i];                              \
  }                                               \
  rv += gen_crf(crf);                             \
  return rv;

#define BEGIN_SUSPEND_BLOCK(pctx) /*nothing*/
#define END_SUSPEND_BLOCK(pctx) /*nothing*/
#define GEN_SUSPEND(has_var, decls, block, crf, pctx, ext)  \
  var rv = "waitfor(";                                 \
  if (has_var) rv += "var ";                           \
  for (var i=0; i<decls.length; ++i) {                 \
    if (i) rv += ",";                                  \
    rv += decls[i][0];                                 \
    if (decls[i].length == 2)                          \
      rv += "="+decls[i][1];                           \
  }                                                    \
  rv += ")" + block;                                   \
  rv += gen_crf(crf);                                  \
  return rv;

#define GEN_COLLAPSE(pctx, ext) return "collapse";

#define BEGIN___JS_BLOCK(pctx)
#define END___JS_BLOCK(pctx)
#define GEN___JS(body, pctx, ext) return "__js "+body;
#ifdef STRINGIFY
#define GEN___RAW(raw, pctx) return "__raw_until 298sd28#svXk\\n"+raw.replace(/\\/g,"\\\\").replace(/'/g,"\\'").replace(/"/g,'\\"').replace(/\n/g, '\\n')+"298sd28#svXk";
#else
#define GEN___RAW(raw, pctx) return "__raw_until 298sd28#svXk\n"+raw+"298sd28#svXk";
#endif
#define GEN_BLOCKLAMBDA(pars, body, pctx, ext) \
  return "{|"+gen_fun_pars(pars)+"| "+body+"}";

